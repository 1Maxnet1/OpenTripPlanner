/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.opentripplanner.api.thrift.definition;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BulkTripDurationResponse implements org.apache.thrift.TBase<BulkTripDurationResponse, BulkTripDurationResponse._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BulkTripDurationResponse");

  private static final org.apache.thrift.protocol.TField EXPECTED_TRIP_DURATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("expected_trip_durations", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BulkTripDurationResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BulkTripDurationResponseTupleSchemeFactory());
  }

  private List<Integer> expected_trip_durations; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXPECTED_TRIP_DURATIONS((short)1, "expected_trip_durations");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXPECTED_TRIP_DURATIONS
          return EXPECTED_TRIP_DURATIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXPECTED_TRIP_DURATIONS, new org.apache.thrift.meta_data.FieldMetaData("expected_trip_durations", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BulkTripDurationResponse.class, metaDataMap);
  }

  public BulkTripDurationResponse() {
  }

  public BulkTripDurationResponse(
    List<Integer> expected_trip_durations)
  {
    this();
    this.expected_trip_durations = expected_trip_durations;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BulkTripDurationResponse(BulkTripDurationResponse other) {
    if (other.isSetExpected_trip_durations()) {
      List<Integer> __this__expected_trip_durations = new ArrayList<Integer>();
      for (Integer other_element : other.expected_trip_durations) {
        __this__expected_trip_durations.add(other_element);
      }
      this.expected_trip_durations = __this__expected_trip_durations;
    }
  }

  public BulkTripDurationResponse deepCopy() {
    return new BulkTripDurationResponse(this);
  }

  @Override
  public void clear() {
    this.expected_trip_durations = null;
  }

  public int getExpected_trip_durationsSize() {
    return (this.expected_trip_durations == null) ? 0 : this.expected_trip_durations.size();
  }

  public java.util.Iterator<Integer> getExpected_trip_durationsIterator() {
    return (this.expected_trip_durations == null) ? null : this.expected_trip_durations.iterator();
  }

  public void addToExpected_trip_durations(int elem) {
    if (this.expected_trip_durations == null) {
      this.expected_trip_durations = new ArrayList<Integer>();
    }
    this.expected_trip_durations.add(elem);
  }

  public List<Integer> getExpected_trip_durations() {
    return this.expected_trip_durations;
  }

  public void setExpected_trip_durations(List<Integer> expected_trip_durations) {
    this.expected_trip_durations = expected_trip_durations;
  }

  public void unsetExpected_trip_durations() {
    this.expected_trip_durations = null;
  }

  /** Returns true if field expected_trip_durations is set (has been assigned a value) and false otherwise */
  public boolean isSetExpected_trip_durations() {
    return this.expected_trip_durations != null;
  }

  public void setExpected_trip_durationsIsSet(boolean value) {
    if (!value) {
      this.expected_trip_durations = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXPECTED_TRIP_DURATIONS:
      if (value == null) {
        unsetExpected_trip_durations();
      } else {
        setExpected_trip_durations((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXPECTED_TRIP_DURATIONS:
      return getExpected_trip_durations();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXPECTED_TRIP_DURATIONS:
      return isSetExpected_trip_durations();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BulkTripDurationResponse)
      return this.equals((BulkTripDurationResponse)that);
    return false;
  }

  public boolean equals(BulkTripDurationResponse that) {
    if (that == null)
      return false;

    boolean this_present_expected_trip_durations = true && this.isSetExpected_trip_durations();
    boolean that_present_expected_trip_durations = true && that.isSetExpected_trip_durations();
    if (this_present_expected_trip_durations || that_present_expected_trip_durations) {
      if (!(this_present_expected_trip_durations && that_present_expected_trip_durations))
        return false;
      if (!this.expected_trip_durations.equals(that.expected_trip_durations))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BulkTripDurationResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BulkTripDurationResponse typedOther = (BulkTripDurationResponse)other;

    lastComparison = Boolean.valueOf(isSetExpected_trip_durations()).compareTo(typedOther.isSetExpected_trip_durations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpected_trip_durations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expected_trip_durations, typedOther.expected_trip_durations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BulkTripDurationResponse(");
    boolean first = true;

    sb.append("expected_trip_durations:");
    if (this.expected_trip_durations == null) {
      sb.append("null");
    } else {
      sb.append(this.expected_trip_durations);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetExpected_trip_durations()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'expected_trip_durations' is unset! Struct:" + toString());
    }

  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BulkTripDurationResponseStandardSchemeFactory implements SchemeFactory {
    public BulkTripDurationResponseStandardScheme getScheme() {
      return new BulkTripDurationResponseStandardScheme();
    }
  }

  private static class BulkTripDurationResponseStandardScheme extends StandardScheme<BulkTripDurationResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BulkTripDurationResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXPECTED_TRIP_DURATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                struct.expected_trip_durations = new ArrayList<Integer>(_list56.size);
                for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                {
                  int _elem58; // required
                  _elem58 = iprot.readI32();
                  struct.expected_trip_durations.add(_elem58);
                }
                iprot.readListEnd();
              }
              struct.setExpected_trip_durationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BulkTripDurationResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.expected_trip_durations != null) {
        oprot.writeFieldBegin(EXPECTED_TRIP_DURATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.expected_trip_durations.size()));
          for (int _iter59 : struct.expected_trip_durations)
          {
            oprot.writeI32(_iter59);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BulkTripDurationResponseTupleSchemeFactory implements SchemeFactory {
    public BulkTripDurationResponseTupleScheme getScheme() {
      return new BulkTripDurationResponseTupleScheme();
    }
  }

  private static class BulkTripDurationResponseTupleScheme extends TupleScheme<BulkTripDurationResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BulkTripDurationResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.expected_trip_durations.size());
        for (int _iter60 : struct.expected_trip_durations)
        {
          oprot.writeI32(_iter60);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BulkTripDurationResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.expected_trip_durations = new ArrayList<Integer>(_list61.size);
        for (int _i62 = 0; _i62 < _list61.size; ++_i62)
        {
          int _elem63; // required
          _elem63 = iprot.readI32();
          struct.expected_trip_durations.add(_elem63);
        }
      }
      struct.setExpected_trip_durationsIsSet(true);
    }
  }

}

